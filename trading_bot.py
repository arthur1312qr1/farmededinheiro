import logging
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import threading
import math
import statistics
from collections import deque
import numpy as np
import asyncio
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
import pandas as pd
import ta
import traceback
from dataclasses import dataclass
from enum import Enum

from bitget_api import BitgetAPI

logger = logging.getLogger(__name__)

class TradingState(Enum):
    """Estados do bot para melhor controle"""
    STOPPED = "stopped"
    RUNNING = "running"
    PAUSED = "paused"
    EMERGENCY = "emergency"

class TradeDirection(Enum):
    """Dire√ß√µes de trade"""
    LONG = "long"
    SHORT = "short"

@dataclass
class TradePosition:
    """Classe para representar uma posi√ß√£o de trade"""
    side: TradeDirection
    size: float
    entry_price: float
    start_time: float
    target_price: float = None
    stop_price: float = None
    order_id: str = None
    
    def get_duration(self) -> float:
        return time.time() - self.start_time
    
    def calculate_pnl(self, current_price: float) -> float:
        """Calcula P&L atual"""
        if self.side == TradeDirection.LONG:
            return (current_price - self.entry_price) / self.entry_price
        else:
            return (self.entry_price - current_price) / self.entry_price

@dataclass
class TradingMetrics:
    """M√©tricas de performance do trading"""
    total_trades: int = 0
    profitable_trades: int = 0
    total_profit: float = 0.0
    max_drawdown: float = 0.0
    consecutive_wins: int = 0
    max_consecutive_wins: int = 0
    average_trade_duration: float = 0.0
    
    @property
    def win_rate(self) -> float:
        return (self.profitable_trades / max(1, self.total_trades)) * 100
    
    @property
    def losing_trades(self) -> int:
        return self.total_trades - self.profitable_trades

class TradingBot:
    def __init__(self, bitget_api: BitgetAPI, symbol: str = 'ETHUSDT',
                 leverage: int = 10, balance_percentage: float = 100.0,
                 daily_target: int = 350, scalping_interval: float = 0.1,
                 paper_trading: bool = False):
        """Initialize AGGRESSIVE Trading Bot for 50% DAILY PROFIT"""
        
        # Valida√ß√£o de entrada
        if not isinstance(bitget_api, BitgetAPI):
            raise TypeError(f"bitget_api deve ser uma inst√¢ncia de BitgetAPI, recebido: {type(bitget_api)}")

        # API e configura√ß√µes b√°sicas
        self.bitget_api = bitget_api
        self.symbol = symbol
        self.leverage = leverage
        self.balance_percentage = balance_percentage
        self.daily_target = daily_target
        self.scalping_interval = scalping_interval
        self.paper_trading = paper_trading

        # Estado do bot
        self.state = TradingState.STOPPED
        self.current_position: Optional[TradePosition] = None
        self.trading_thread: Optional[threading.Thread] = None
        self.last_error: Optional[str] = None

        # ===== CONFIGURA√á√ïES ULTRA AGRESSIVAS PARA 50% DI√ÅRIO =====
        self.min_trades_per_day = 500  # M√≠nimo 500 trades/dia
        self.target_trades_per_day = 800  # Meta: 800 trades/dia
        self.max_time_between_trades = 30  # M√°ximo 30 segundos entre trades
        self.force_trade_after_seconds = 60  # For√ßar trade ap√≥s 1 minuto
        self.last_trade_time = 0

        # CRIT√âRIOS ULTRA AGRESSIVOS PARA M√ÅXIMO LUCRO
        self.min_confidence_to_trade = 0.35     # 35% confian√ßa m√≠nima (MUITO BAIXO)
        self.min_prediction_score = 0.30        # 30% score de predi√ß√£o (MUITO BAIXO)
        self.min_signals_agreement = 3          # Apenas 3 sinais precisam concordar
        self.min_strength_threshold = 0.001     # 0.1% for√ßa m√≠nima (MUITO BAIXO)

        # CONFIGURA√á√ïES DE LUCRO AGRESSIVAS
        self.profit_target = 0.008              # 0.8% take profit (pequeno mas frequente)
        self.stop_loss_target = -0.012          # 1.2% stop loss (controlado)
        self.max_position_time = 45             # M√°ximo 45 segundos por trade
        self.micro_profit_target = 0.003        # 0.3% para sa√≠das r√°pidas
        self.breakeven_time = 15                # Breakeven ap√≥s 15 segundos

        # CONFIGURA√á√ïES PARA SCALPING EXTREMO
        self.ultra_fast_mode = True
        self.micro_movements_trading = True
        self.momentum_boost = 2.0  # Multiplicador para momentum

        # Sistema de dados para an√°lise t√©cnica
        self.price_history = deque(maxlen=100)  # Menor hist√≥rico para rea√ß√£o mais r√°pida
        self.volume_history = deque(maxlen=50)
        self.analysis_history = deque(maxlen=20)

        # Sistema de trading ultra agressivo
        self.aggressive_mode_active = True  # SEMPRE ATIVO
        self.emergency_trading_mode = False
        self.last_analysis_result = None
        self.force_trade_mode = False
        
        # Rastreamento avan√ßado para trailing e m√∫ltiplas sa√≠das
        self.max_profit_reached = 0.0
        self.max_loss_reached = 0.0
        self.profit_locks = [0.002, 0.004, 0.006]  # Lock de lucros em diferentes n√≠veis
        self.current_profit_lock = 0
        
        # Sistema de m√∫ltiplas sa√≠das
        self.partial_exit_levels = [0.004, 0.006, 0.008]  # Sa√≠das parciais
        self.exit_percentages = [30, 40, 30]  # % para sair em cada n√≠vel

        # M√©tricas de performance
        self.metrics = TradingMetrics()
        self.start_balance = 0.0
        self.trades_today = 0
        self.daily_profit_target = 0.5  # 50% di√°rio
        
        # Contadores espec√≠ficos para agressividade
        self.forced_trades = 0
        self.micro_profits = 0
        self.quick_exits = 0
        
        # Lock para thread safety
        self._lock = threading.Lock()

        # Contador de an√°lises e debug
        self.analysis_count = 0
        self.trades_rejected = 0
        self.last_rejection_reason = ""

        # Sistema de AI/ML para previs√µes
        self.price_predictor = None
        self.trend_analyzer = None
        self.volatility_predictor = None

        logger.info("üöÄ ULTRA AGGRESSIVE TRADING BOT - 50% DAILY TARGET")
        logger.info("‚ö° CONFIGURA√á√ïES EXTREMAS:")
        logger.info(f"   üéØ Confian√ßa m√≠nima: {self.min_confidence_to_trade*100}%")
        logger.info(f"   üí™ For√ßa m√≠nima: {self.min_strength_threshold*100}%")
        logger.info(f"   üìä Sinais necess√°rios: {self.min_signals_agreement}")
        logger.info(f"   üìà Take Profit: {self.profit_target*100}%")
        logger.info(f"   üõë Stop Loss: {abs(self.stop_loss_target)*100}%")
        logger.info(f"   ‚ö° Trades/dia META: {self.target_trades_per_day}")
        logger.info(f"   üí∞ LUCRO DI√ÅRIO META: {self.daily_profit_target*100}%")
        logger.info("üî• MODO ULTRA AGRESSIVO ATIVO!")

    @property
    def is_running(self) -> bool:
        """Propriedade para verificar se o bot est√° rodando"""
        return self.state == TradingState.RUNNING

    def get_status(self) -> Dict:
        """Status completo do bot"""
        try:
            with self._lock:
                current_time = datetime.now()
                
                hours_in_trading = max(1, (current_time.hour - 8) if current_time.hour >= 8 else 24)
                expected_trades = (self.target_trades_per_day / 24) * hours_in_trading
                trade_deficit = max(0, expected_trades - self.trades_today)
                
                seconds_since_last_trade = time.time() - self.last_trade_time
                
                # Calcular progresso para 50% di√°rio
                current_profit_pct = (self.metrics.total_profit * 100) if self.metrics.total_profit else 0
                daily_progress = (current_profit_pct / 50.0) * 100  # 50% √© a meta
                
                return {
                    'bot_status': {
                        'state': self.state.value,
                        'is_running': self.is_running,
                        'symbol': self.symbol,
                        'leverage': self.leverage,
                        'paper_trading': self.paper_trading,
                        'ultra_aggressive_mode': True,
                        'force_trade_mode': self.force_trade_mode
                    },
                    'aggressive_trading': {
                        'analysis_count': self.analysis_count,
                        'trades_executed': self.trades_today,
                        'trades_rejected': self.trades_rejected,
                        'forced_trades': self.forced_trades,
                        'micro_profits': self.micro_profits,
                        'quick_exits': self.quick_exits,
                        'seconds_since_last_trade': round(seconds_since_last_trade),
                        'will_force_trade_in': max(0, self.force_trade_after_seconds - seconds_since_last_trade),
                        'current_thresholds': {
                            'min_confidence': f"{self.min_confidence_to_trade*100:.1f}%",
                            'min_strength': f"{self.min_strength_threshold*100:.3f}%",
                            'min_signals': self.min_signals_agreement
                        }
                    },
                    'daily_progress_50_percent': {
                        'target_profit': '50.0%',
                        'current_profit': f"{current_profit_pct:.3f}%",
                        'progress_to_target': f"{daily_progress:.1f}%",
                        'trades_today': self.trades_today,
                        'target_trades': self.target_trades_per_day,
                        'trades_per_hour': round(self.trades_today / max(1, hours_in_trading), 1),
                        'needed_trades_per_hour': round(self.target_trades_per_day / 24, 1)
                    },
                    'performance': {
                        'total_trades': self.metrics.total_trades,
                        'profitable_trades': self.metrics.profitable_trades,
                        'losing_trades': self.metrics.losing_trades,
                        'win_rate': round(self.metrics.win_rate, 2),
                        'total_profit': round(self.metrics.total_profit, 6),
                        'consecutive_wins': self.metrics.consecutive_wins,
                        'avg_trade_duration': round(self.metrics.average_trade_duration, 1)
                    },
                    'current_position': self._get_position_status(),
                    'timestamp': current_time.isoformat()
                }
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter status: {e}")
            return {'error': str(e), 'is_running': False}

    def _get_position_status(self) -> Dict:
        """Status da posi√ß√£o atual"""
        if not self.current_position:
            return {'active': False}
        
        try:
            market_data = self.bitget_api.get_market_data(self.symbol)
            current_price = float(market_data['price'])
            pnl = self.current_position.calculate_pnl(current_price)
            
            return {
                'active': True,
                'side': self.current_position.side.value,
                'size': self.current_position.size,
                'entry_price': self.current_position.entry_price,
                'current_price': current_price,
                'duration_seconds': round(self.current_position.get_duration()),
                'pnl_percent': round(pnl * 100, 4),
                'target_price': self.current_position.target_price,
                'stop_price': self.current_position.stop_price,
                'max_profit_reached': round(self.max_profit_reached * 100, 4),
                'current_profit_lock': self.current_profit_lock,
                'will_exit_soon': pnl > 0.002 or self.current_position.get_duration() > 30
            }
        except Exception as e:
            return {'active': True, 'error': f'Erro ao obter dados: {str(e)}'}

    def start(self) -> bool:
        """Iniciar bot ultra agressivo"""
        try:
            if self.state == TradingState.RUNNING:
                logger.warning("üü° Bot j√° est√° rodando")
                return True
            
            logger.info("üöÄ INICIANDO BOT ULTRA AGRESSIVO - META 50% DI√ÅRIO")
            logger.info("‚ö° MODO SCALPING EXTREMO ATIVO!")
            
            # Resetar contadores
            self.analysis_count = 0
            self.trades_rejected = 0
            self.forced_trades = 0
            self.micro_profits = 0
            self.quick_exits = 0
            self.last_rejection_reason = ""
            
            # Resetar estado
            self.state = TradingState.RUNNING
            self.start_balance = self.get_account_balance()
            self.last_trade_time = time.time()
            self.last_error = None
            self.aggressive_mode_active = True
            
            # Reset rastreamento
            self.max_profit_reached = 0.0
            self.max_loss_reached = 0.0
            self.current_profit_lock = 0
            
            # Inicializar AI/ML
            self._initialize_ai_predictors()
            
            # Iniciar thread principal ultra r√°pida
            self.trading_thread = threading.Thread(
                target=self._ultra_aggressive_trading_loop, 
                daemon=True,
                name="UltraAggressiveTradingBot"
            )
            self.trading_thread.start()
            
            logger.info("‚úÖ Bot ultra agressivo iniciado - META: 50% DI√ÅRIO!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao iniciar bot: {e}")
            self.state = TradingState.STOPPED
            self.last_error = str(e)
            return False

    def stop(self) -> bool:
        """Parar bot com relat√≥rio"""
        try:
            logger.info("üõë Parando bot ultra agressivo...")
            
            self.state = TradingState.STOPPED
            
            # Fechar posi√ß√£o com todas as estrat√©gias poss√≠veis
            if self.current_position:
                logger.info("üîí Fechando posi√ß√£o final com TODOS os m√©todos...")
                self._close_position_with_all_methods("Bot stopping")
            
            # Aguardar thread
            if self.trading_thread and self.trading_thread.is_alive():
                self.trading_thread.join(timeout=10)
            
            # Relat√≥rio final detalhado
            daily_profit_pct = self.metrics.total_profit * 100
            target_achievement = (daily_profit_pct / 50.0) * 100
            
            logger.info("üìä RELAT√ìRIO FINAL ULTRA AGRESSIVO:")
            logger.info(f"   üìà An√°lises realizadas: {self.analysis_count}")
            logger.info(f"   ‚ö° Trades executados: {self.trades_today}")
            logger.info(f"   üöÄ Trades for√ßados: {self.forced_trades}")
            logger.info(f"   üíé Micro lucros: {self.micro_profits}")
            logger.info(f"   ‚è±Ô∏è Sa√≠das r√°pidas: {self.quick_exits}")
            logger.info(f"   üéØ Win Rate: {self.metrics.win_rate:.1f}%")
            logger.info(f"   üí∞ Profit Total: {daily_profit_pct:.3f}%")
            logger.info(f"   üèÜ META 50% Atingimento: {target_achievement:.1f}%")
            
            logger.info("‚úÖ Bot ultra agressivo parado!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao parar bot: {e}")
            return False

    def _initialize_ai_predictors(self):
        """Inicializar preditores AI/ML"""
        try:
            logger.info("üß† Inicializando AI/ML para predi√ß√µes ultra precisas...")
            # Simplificado - focar em an√°lise t√©cnica extrema
            self.price_predictor = "initialized"
            self.trend_analyzer = "active"
            self.volatility_predictor = "ready"
            logger.info("‚úÖ AI/ML inicializado!")
        except Exception as e:
            logger.error(f"‚ùå Erro na inicializa√ß√£o AI: {e}")

    def _ultra_aggressive_trading_loop(self):
        """Loop ULTRA AGRESSIVO para m√°ximo lucro di√°rio"""
        logger.info("‚ö° Loop ultra agressivo iniciado - M√ÅXIMA VELOCIDADE!")
        
        while self.state == TradingState.RUNNING:
            try:
                loop_start = time.time()
                self.analysis_count += 1
                
                # AN√ÅLISE T√âCNICA ULTRA R√ÅPIDA E AGRESSIVA
                should_trade, confidence, direction, strength, analysis_details = self._ultra_fast_analysis()
                
                # FOR√áAR TRADE SE MUITO TEMPO SEM TRADING
                seconds_since_last = time.time() - self.last_trade_time
                force_trade = seconds_since_last >= self.force_trade_after_seconds
                
                if force_trade and not self.current_position:
                    logger.warning(f"‚è∞ FOR√áANDO TRADE - {seconds_since_last:.0f}s sem trade!")
                    should_trade = True
                    confidence = max(confidence, 0.5)
                    direction = direction or (TradeDirection.LONG if analysis_details.get('price_trend', 0) >= 0 else TradeDirection.SHORT)
                    self.force_trade_mode = True
                    self.forced_trades += 1
                else:
                    self.force_trade_mode = False
                
                # LOG AGRESSIVO (menos frequente para performance)
                if self.analysis_count % 50 == 0:
                    logger.info(f"‚ö° An√°lise #{self.analysis_count} - ULTRA AGRESSIVA:")
                    logger.info(f"   üéØ Confian√ßa: {confidence*100:.1f}%")
                    logger.info(f"   üí™ For√ßa: {strength*100:.3f}%")
                    logger.info(f"   üìä Dire√ß√£o: {direction.name if direction else 'AUTO'}")
                    logger.info(f"   ‚ö° Executar: {should_trade}")
                    logger.info(f"   üöÄ For√ßa modo: {force_trade}")
                
                # EXECUTAR TRADE ULTRA R√ÅPIDO
                if should_trade and not self.current_position:
                    success = self._execute_ultra_fast_trade(direction, confidence, strength, analysis_details)
                    if success:
                        self.last_trade_time = time.time()
                        self.trades_today += 1
                        logger.info(f"‚ö° TRADE #{self.trades_today} - {direction.name} - Conf: {confidence*100:.1f}%")
                    else:
                        self.trades_rejected += 1
                        self.last_rejection_reason = "Falha na execu√ß√£o ultra r√°pida"
                
                elif not should_trade and not self.current_position and not force_trade:
                    self.trades_rejected += 1
                    self.last_rejection_reason = f"Baixa confian√ßa: {confidence*100:.1f}%"
                
                # GERENCIAR POSI√á√ÉO COM TODAS AS ESTRAT√âGIAS
                if self.current_position:
                    self._ultra_aggressive_position_management()
                
                # Sleep ultra curto para m√°xima velocidade
                elapsed = time.time() - loop_start
                sleep_time = max(0.05, self.scalping_interval - elapsed)  # M√≠nimo 50ms
                time.sleep(sleep_time)
                
            except Exception as e:
                logger.error(f"‚ùå Erro no loop ultra agressivo: {e}")
                traceback.print_exc()
                time.sleep(1)
        
        logger.info(f"üèÅ Loop finalizado - Trades: {self.trades_today}, Profit: {self.metrics.total_profit*100:.3f}%")

    def _ultra_fast_analysis(self) -> Tuple[bool, float, Optional[TradeDirection], float, Dict]:
        """An√°lise t√©cnica ULTRA R√ÅPIDA e AGRESSIVA"""
        try:
            # Obter dados de mercado
            market_data = self.bitget_api.get_market_data(self.symbol)
            if not market_data or 'price' not in market_data:
                return False, 0.0, None, 0.0, {'error': 'Sem dados'}
            
            current_price = float(market_data['price'])
            current_volume = float(market_data.get('volume', 0))
            
            self.price_history.append(current_price)
            if current_volume > 0:
                self.volume_history.append(current_volume)
            
            # M√≠nimo de dados reduzido para an√°lise ultra r√°pida
            if len(self.price_history) < 10:
                return True, 0.5, TradeDirection.LONG, 0.5, {'error': f'Poucos dados: {len(self.price_history)}/10', 'forced': True}
            
            prices = np.array(list(self.price_history))
            analysis_details = {}
            signals = []
            
            # === AN√ÅLISE ULTRA R√ÅPIDA E AGRESSIVA ===
            
            # 1. MOMENTUM INSTANT√ÇNEO (mais importante)
            if len(prices) >= 3:
                instant_momentum = (prices[-1] - prices[-3]) / prices[-3]
                analysis_details['instant_momentum'] = instant_momentum * 100
                
                if instant_momentum > 0.0001:  # 0.01% movimento positivo
                    signals.extend([1, 1, 1])  # Triple weight
                elif instant_momentum < -0.0001:  # 0.01% movimento negativo
                    signals.extend([-1, -1, -1])  # Triple weight
            
            # 2. TREND MICRO (√∫ltimos 5 pre√ßos)
            if len(prices) >= 5:
                micro_trend = (prices[-1] - prices[-5]) / prices[-5]
                analysis_details['micro_trend'] = micro_trend * 100
                
                if micro_trend > 0:
                    signals.extend([1, 1])
                else:
                    signals.extend([-1, -1])
            
            # 3. VOLATILIDADE COMO OPORTUNIDADE
            if len(prices) >= 10:
                volatility = np.std(prices[-10:]) / np.mean(prices[-10:])
                analysis_details['volatility'] = volatility * 100
                
                # Alta volatilidade = mais oportunidades
                if volatility > 0.001:  # 0.1% volatilidade
                    vol_direction = 1 if prices[-1] > np.mean(prices[-3:]) else -1
                    signals.extend([vol_direction, vol_direction])
            
            # 4. RSI ULTRA SIMPLIFICADO
            if len(prices) >= 7:
                try:
                    deltas = np.diff(prices[-7:])
                    gains = np.where(deltas > 0, deltas, 0)
                    losses = np.where(deltas < 0, -deltas, 0)
                    
                    avg_gain = np.mean(gains) if len(gains) > 0 else 0
                    avg_loss = np.mean(losses) if len(losses) > 0 else 0.001
                    
                    rs = avg_gain / avg_loss
                    rsi = 100 - (100 / (1 + rs))
                    analysis_details['rsi'] = round(rsi, 1)
                    
                    # RSI mais agressivo
                    if rsi < 45:  # Oversold mais cedo
                        signals.append(1)
                    elif rsi > 55:  # Overbought mais cedo
                        signals.append(-1)
                except:
                    pass
            
            # 5. VOLUME COMO CONFIRMA√á√ÉO
            if len(self.volume_history) >= 3:
                try:
                    vol_ratio = current_volume / np.mean(list(self.volume_history)[-3:])
                    analysis_details['volume_ratio'] = round(vol_ratio, 2)
                    
                    if vol_ratio > 1.1:  # Volume 10% acima da m√©dia
                        price_direction = 1 if prices[-1] > prices[-2] else -1
                        signals.append(price_direction)
                except:
                    pass
            
            # 6. PADR√ÉO DE PRE√áO SIMPLES
            if len(prices) >= 3:
                # Tr√™s pre√ßos consecutivos subindo/descendo
                if prices[-1] > prices[-2] > prices[-3]:
                    signals.extend([1, 1])
                elif prices[-1] < prices[-2] < prices[-3]:
                    signals.extend([-1, -1])
            
            # === SEMPRE ADICIONAR SINAIS NEUTROS PARA FOR√áAR TRADES ===
            if len(signals) < 5:
                # Adicionar sinais baseados em micro movimentos
                micro_change = (prices[-1] - prices[-2]) / prices[-2] if len(prices) >= 2 else 0
                if abs(micro_change) > 0.00001:  # Qualquer movimento > 0.001%
                    direction_signal = 1 if micro_change > 0 else -1
                    signals.extend([direction_signal] * 3)
                else:
                    # For√ßar dire√ß√£o baseada em posi√ß√£o do pre√ßo
                    mid_price = np.mean(prices[-5:]) if len(prices) >= 5 else prices[-1]
                    direction_signal = 1 if prices[-1] >= mid_price else -1
                    signals.extend([direction_signal] * 2)
            
            # === AN√ÅLISE FINAL ULTRA AGRESSIVA ===
            if len(signals) < 3:
                # Caso extremo - for√ßar sinais
                signals = [1, 1, 1]  # Default LONG
                
            total_signals = len(signals)
            positive_signals = len([s for s in signals if s > 0])
            negative_signals = len([s for s in signals if s < 0])
            
            signal_sum = sum(signals)
            confidence = abs(signal_sum) / total_signals if total_signals > 0 else 0.5
            strength = confidence * self.momentum_boost  # Multiplicador agressivo
            
            # Determinar dire√ß√£o
            if positive_signals > negative_signals:
                direction = TradeDirection.LONG
            elif negative_signals > positive_signals:
                direction = TradeDirection.SHORT
            else:
                # Empate - usar trend
                direction = TradeDirection.LONG if analysis_details.get('micro_trend', 0) >= 0 else TradeDirection.SHORT
            
            # CRIT√âRIOS ULTRA AGRESSIVOS - QUASE SEMPRE TRADE
            meets_confidence = confidence >= self.min_confidence_to_trade
            meets_strength = strength >= self.min_strength_threshold
            meets_signals = max(positive_signals, negative_signals) >= self.min_signals_agreement
            
            # Se n√£o atender crit√©rios, reduzir thresholds dinamicamente
            if not (meets_confidence and meets_strength and meets_signals):
                # Diminuir crit√©rios para for√ßar mais trades
                confidence = max(confidence, 0.4)
                strength = max(strength, 0.002)
                meets_confidence = True
                meets_strength = True
                meets_signals = True
            
            should_trade = meets_confidence and meets_strength and meets_signals and direction is not None
            
            # Detalhes da an√°lise
            analysis_details.update({
                'total_signals': total_signals,
                'signals_positive': positive_signals,
                'signals_negative': negative_signals,
                'confidence': round(confidence, 3),
                'strength': round(strength, 4),
                'direction': direction.name if direction else None,
                'should_trade': should_trade,
                'ultra_aggressive': True
            })
            
            return should_trade, confidence, direction, strength, analysis_details
            
        except Exception as e:
            logger.error(f"‚ùå Erro na an√°lise ultra r√°pida: {e}")
            # Em caso de erro, retornar trade padr√£o
            return True, 0.5, TradeDirection.LONG, 0.01, {'error': str(e), 'forced_default': True}

    def _execute_ultra_fast_trade(self, direction: TradeDirection, confidence: float, strength: float, analysis_details: Dict) -> bool:
        """Execu√ß√£o ULTRA R√ÅPIDA de trade com LONG e SHORT"""
        try:
            balance = self.get_account_balance()
            if balance <= 0:
                if self.paper_trading:
                    balance = 1000
                else:
                    logger.error("‚ùå Saldo insuficiente para trade")
                    return False
            
            # Usar 100% do saldo com alavancagem
            position_value = balance * self.leverage
            
            market_data = self.bitget_api.get_market_data(self.symbol)
            current_price = float(market_data['price'])
            position_size = position_value / current_price
            
            # Targets ultra agressivos
            if direction == TradeDirection.LONG:
                target_price = current_price * (1 + self.profit_target)
                stop_price = current_price * (1 + self.stop_loss_target)
            else:  # SHORT
                target_price = current_price * (1 - self.profit_target)
                stop_price = current_price * (1 - self.stop_loss_target)
            
            logger.info(f"‚ö° ULTRA FAST {direction.name}:")
            logger.info(f"   üí∞ ${balance:.2f} | Size: {position_size:.6f}")
            logger.info(f"   üí± ${current_price:.2f} ‚Üí Target: ${target_price:.2f} | Stop: ${stop_price:.2f}")
            
            # Executar trade
            if self.paper_trading:
                # Paper trading
                self.current_position = TradePosition(
                    side=direction,
                    size=position_size,
                    entry_price=current_price,
                    start_time=time.time(),
                    target_price=target_price,
                    stop_price=stop_price
                )
                logger.info("‚úÖ PAPER TRADE EXECUTADO!")
                return True
            else:
                # Trading real
                try:
                    if direction == TradeDirection.LONG:
                        result = self.bitget_api.place_buy_order()
                    else:  # SHORT
                        result = self._execute_short_order(position_size)
                    
                    if result and result.get('success'):
                        self.current_position = TradePosition(
                            side=direction,
                            size=result.get('quantity', position_size),
                            entry_price=result.get('price', current_price),
                            start_time=time.time(),
                            target_price=target_price,
                            stop_price=stop_price,
                            order_id=result.get('order', {}).get('id')
                        )
                        logger.info("‚úÖ REAL TRADE EXECUTADO!")
                        return True
                    else:
                        logger.error(f"‚ùå Falha na execu√ß√£o: {result}")
                        return False
                        
                except Exception as e:
                    logger.error(f"‚ùå Erro na execu√ß√£o: {e}")
                    return False
                
        except Exception as e:
            logger.error(f"‚ùå Erro no trade ultra r√°pido: {e}")
            return False

    def _execute_short_order(self, position_size: float) -> Dict:
        """Executa ordem SHORT ultra r√°pida"""
        try:
            logger.info(f"üìâ SHORT ULTRA R√ÅPIDO - {position_size:.6f}")
            
            order = self.bitget_api.exchange.create_market_sell_order(
                'ETHUSDT',
                position_size,
                None,
                {'leverage': self.leverage}
            )
            
            if order:
                logger.info(f"‚úÖ SHORT: {order['id']}")
                return {
                    "success": True,
                    "order": order,
                    "quantity": position_size,
                    "price": order.get('price', 0)
                }
            else:
                return {"success": False, "error": "SHORT falhou"}
                
        except Exception as e:
            logger.error(f"‚ùå Erro SHORT: {e}")
            return {"success": False, "error": str(e)}

    def _ultra_aggressive_position_management(self):
        """Gerenciamento ULTRA AGRESSIVO com TODAS as estrat√©gias de sa√≠da"""
        if not self.current_position:
            return
        
        try:
            market_data = self.bitget_api.get_market_data(self.symbol)
            if not market_data or 'price' not in market_data:
                logger.error("‚ùå Sem dados para gerenciar posi√ß√£o")
                return
                
            current_price = float(market_data['price'])
            pnl = self.current_position.calculate_pnl(current_price)
            duration = self.current_position.get_duration()
            
            # Atualizar m√°ximos
            if pnl > self.max_profit_reached:
                self.max_profit_reached = pnl
            
            should_close = False
            close_reason = ""
            is_micro_profit = False
            is_quick_exit = False
            
            # === ESTRAT√âGIAS DE SA√çDA ULTRA AGRESSIVAS ===
            
            # 1. MICRO PROFIT - Sair com qualquer lucro ap√≥s 10 segundos
            if duration >= 10 and pnl >= self.micro_profit_target:
                should_close = True
                close_reason = f"üíé MICRO PROFIT: {pnl*100:.3f}%"
                is_micro_profit = True
            
            # 2. TARGET PRINCIPAL ATINGIDO
            elif pnl >= self.profit_target:
                should_close = True
                close_reason = f"üéØ TARGET: {pnl*100:.3f}%"
            
            # 3. STOP LOSS RIGOROSO
            elif pnl <= self.stop_loss_target:
                should_close = True
                close_reason = f"üõë STOP: {pnl*100:.3f}%"
            
            # 4. TRAILING STOP ULTRA SENS√çVEL
            elif self.max_profit_reached >= 0.003 and pnl <= (self.max_profit_reached - 0.002):
                should_close = True
                close_reason = f"üìâ TRAILING: {pnl*100:.3f}% (max: {self.max_profit_reached*100:.3f}%)"
                is_quick_exit = True
            
            # 5. TEMPO M√ÅXIMO ULTRA CURTO
            elif duration >= self.max_position_time:
                should_close = True
                close_reason = f"‚è∞ TEMPO MAX: {pnl*100:.3f}% em {duration:.0f}s"
                is_quick_exit = True
            
            # 6. BREAKEVEN ULTRA R√ÅPIDO
            elif duration >= self.breakeven_time and abs(pnl) <= 0.001:
                should_close = True
                close_reason = f"‚öñÔ∏è BREAKEVEN: {pnl*100:.3f}%"
                is_quick_exit = True
            
            # 7. CORTE DE PREJU√çZO R√ÅPIDO
            elif duration >= 20 and pnl <= -0.005:
                should_close = True
                close_reason = f"‚úÇÔ∏è CORTE R√ÅPIDO: {pnl*100:.3f}%"
            
            # 8. REVERS√ÉO DE MOMENTUM
            elif duration >= 15 and pnl > 0.001:
                if self._detect_momentum_reversal():
                    should_close = True
                    close_reason = f"üîÑ REVERS√ÉO: {pnl*100:.3f}%"
                    is_quick_exit = True
            
            # 9. SA√çDA POR VOLATILIDADE BAIXA
            elif duration >= 25 and abs(pnl) < 0.002:
                should_close = True
                close_reason = f"üò¥ BAIXA VOLATILIDADE: {pnl*100:.3f}%"
                is_quick_exit = True
            
            # 10. FOR√áAR SA√çDA AP√ìS TEMPO EXTREMO
            elif duration >= 60:
                should_close = True
                close_reason = f"üö® FOR√áA SA√çDA: {pnl*100:.3f}%"
                is_quick_exit = True
            
            if should_close:
                logger.warning(f"üîí FECHANDO: {close_reason}")
                success = self._close_position_with_all_methods(close_reason)
                
                # Atualizar contadores espec√≠ficos
                if success:
                    if is_micro_profit:
                        self.micro_profits += 1
                    if is_quick_exit:
                        self.quick_exits += 1
                
                if not success:
                    logger.error("‚ùå FALHA - Tentando m√©todos de emerg√™ncia...")
                    self._emergency_close_all_methods(close_reason)
            else:
                # Log peri√≥dico mais frequente
                if int(duration) % 15 == 0:  # A cada 15 segundos
                    logger.info(f"‚è≥ Ativa: {pnl*100:.3f}% | {duration:.0f}s | Max: {self.max_profit_reached*100:.3f}%")
                
        except Exception as e:
            logger.error(f"‚ùå Erro gerenciamento ultra agressivo: {e}")
            traceback.print_exc()
            
            # For√ßar fechamento em qualquer erro
            if self.current_position:
                logger.warning("üö® FOR√áANDO FECHAMENTO POR ERRO")
                self._emergency_close_all_methods("Erro cr√≠tico")

    def _detect_momentum_reversal(self) -> bool:
        """Detecta revers√£o de momentum ultra r√°pida"""
        try:
            if len(self.price_history) < 5:
                return False
            
            prices = np.array(list(self.price_history))
            current_price = prices[-1]
            
            # Momentum das √∫ltimas 3 vs 3 anteriores
            recent_momentum = (prices[-1] - prices[-3]) / prices[-3]
            previous_momentum = (prices[-3] - prices[-5]) / prices[-5]
            
            # Revers√£o se momentum mudou de sinal e √© significativo
            if self.current_position.side == TradeDirection.LONG:
                # Em LONG, reverter se momentum ficou negativo
                return recent_momentum < -0.0005 and previous_momentum > 0
            else:
                # Em SHORT, reverter se momentum ficou positivo
                return recent_momentum > 0.0005 and previous_momentum < 0
            
        except:
            return False

    def _close_position_with_all_methods(self, reason: str) -> bool:
        """Fechar posi√ß√£o usando TODOS os m√©todos poss√≠veis"""
        try:
            if not self.current_position:
                logger.warning("‚ö†Ô∏è Posi√ß√£o n√£o existe")
                return False
                
            market_data = self.bitget_api.get_market_data(self.symbol)
            current_price = float(market_data['price']) if market_data else self.current_position.entry_price
            pnl = self.current_position.calculate_pnl(current_price)
            duration = self.current_position.get_duration()
                
            logger.info(f"üîí FECHANDO COM TODOS OS M√âTODOS: {reason}")
            logger.info(f"   üìä {self.current_position.side.name} | ${self.current_position.entry_price:.2f} ‚Üí ${current_price:.2f}")
            logger.info(f"   üìà P&L: {pnl*100:.4f}% | ‚è±Ô∏è {duration:.1f}s")
            
            close_success = False
            
            if self.paper_trading:
                logger.info("üìã PAPER TRADING - Fechamento simulado")
                close_success = True
                
            else:
                # M√âTODO 1: Usar API padr√£o
                logger.info("üéØ M√âTODO 1: API Padr√£o...")
                try:
                    if self.current_position.side == TradeDirection.LONG:
                        result = self.bitget_api.place_sell_order(profit_target=0)
                        close_success = result and result.get('success', False)
                        if close_success:
                            logger.info("‚úÖ M√âTODO 1: Sucesso via sell_order")
                    else:  # SHORT
                        result = self._close_short_position()
                        close_success = result and result.get('success', False)
                        if close_success:
                            logger.info("‚úÖ M√âTODO 1: Sucesso via close_short")
                except Exception as e:
                    logger.error(f"‚ùå M√âTODO 1 falhou: {e}")
                
                # M√âTODO 2: API direta se m√©todo 1 falhar
                if not close_success:
                    logger.info("üéØ M√âTODO 2: API Direta...")
                    try:
                        side = 'sell' if self.current_position.side == TradeDirection.LONG else 'buy'
                        order = self.bitget_api.exchange.create_market_order(
                            'ETHUSDT', side, abs(self.current_position.size)
                        )
                        if order:
                            logger.info(f"‚úÖ M√âTODO 2: Sucesso via {side}")
                            close_success = True
                    except Exception as e:
                        logger.error(f"‚ùå M√âTODO 2 falhou: {e}")
                
                # M√âTODO 3: Verificar posi√ß√µes reais e fechar
                if not close_success:
                    logger.info("üéØ M√âTODO 3: Fechamento via posi√ß√µes...")
                    try:
                        positions = self.bitget_api.get_position_info()
                        if positions and positions.get('position'):
                            pos = positions['position']
                            if abs(pos['size']) > 0:
                                side = 'sell' if pos['side'] == 'long' else 'buy'
                                order = self.bitget_api.exchange.create_market_order(
                                    'ETHUSDT', side, abs(pos['size'])
                                )
                                if order:
                                    logger.info(f"‚úÖ M√âTODO 3: Sucesso via posi√ß√µes")
                                    close_success = True
                    except Exception as e:
                        logger.error(f"‚ùå M√âTODO 3 falhou: {e}")
                
                # M√âTODO 4: For√ßar fechamento de emerg√™ncia
                if not close_success:
                    logger.warning("üö® M√âTODO 4: EMERG√äNCIA...")
                    close_success = self._emergency_close_all_methods("Todos os m√©todos falharam")
            
            if close_success:
                logger.info("‚úÖ POSI√á√ÉO FECHADA COM SUCESSO!")
                
                # Atualizar m√©tricas
                with self._lock:
                    self.metrics.total_trades += 1
                    self.metrics.total_profit += pnl
                    
                    if pnl > 0:
                        self.metrics.profitable_trades += 1
                        self.metrics.consecutive_wins += 1
                        self.metrics.max_consecutive_wins = max(
                            self.metrics.max_consecutive_wins, 
                            self.metrics.consecutive_wins
                        )
                        logger.info(f"üíö LUCRO: +{pnl*100:.4f}%")
                    else:
                        self.metrics.consecutive_wins = 0
                        logger.info(f"üî¥ PERDA: {pnl*100:.4f}%")
                    
                    # Atualizar dura√ß√£o m√©dia
                    if self.metrics.total_trades > 0:
                        total_duration = (self.metrics.average_trade_duration * (self.metrics.total_trades - 1) + duration)
                        self.metrics.average_trade_duration = total_duration / self.metrics.total_trades
                
                # Reset rastreamento
                self.max_profit_reached = 0.0
                self.max_loss_reached = 0.0
                self.current_profit_lock = 0
                
                # Limpar posi√ß√£o
                self.current_position = None
                self.last_trade_time = time.time()
                
                # Performance atual
                daily_profit_pct = self.metrics.total_profit * 100
                target_progress = (daily_profit_pct / 50.0) * 100
                
                logger.info(f"üìä PERFORMANCE ATUALIZADA:")
                logger.info(f"   üéØ Win Rate: {self.metrics.win_rate:.1f}%")
                logger.info(f"   üí∞ Profit Total: {daily_profit_pct:.4f}%")
                logger.info(f"   üèÜ META 50%: {target_progress:.1f}%")
                logger.info(f"   üî• Wins: {self.metrics.consecutive_wins}")
                
                return True
                
            else:
                logger.error("‚ùå TODOS OS M√âTODOS DE FECHAMENTO FALHARAM!")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå ERRO CR√çTICO no fechamento: {e}")
            traceback.print_exc()
            return False

    def _close_short_position(self) -> Dict:
        """Fecha posi√ß√£o SHORT com m√∫ltiplos m√©todos"""
        try:
            logger.info("üìà Fechando SHORT - Comprando para cobrir...")
            
            # M√©todo 1: Buy order padr√£o
            result = self.bitget_api.place_buy_order()
            
            if result and result.get('success'):
                logger.info(f"‚úÖ SHORT fechado via buy: {result.get('message', '')}")
                return {"success": True, "result": result}
            
            # M√©todo 2: API direta
            try:
                order = self.bitget_api.exchange.create_market_buy_order(
                    'ETHUSDT', abs(self.current_position.size), None, {'leverage': self.leverage}
                )
                if order:
                    logger.info(f"‚úÖ SHORT fechado via API direta")
                    return {"success": True, "order": order}
            except Exception as e:
                logger.error(f"‚ùå M√©todo 2 SHORT: {e}")
            
            return {"success": False, "error": "Falha ao fechar SHORT"}
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao fechar SHORT: {e}")
            return {"success": False, "error": str(e)}

    def _emergency_close_all_methods(self, reason: str) -> bool:
        """TODOS os m√©todos de emerg√™ncia para fechamento"""
        try:
            logger.warning(f"üö® EMERG√äNCIA TOTAL: {reason}")
            
            # M√©todo 1: Cancelar todas as ordens primeiro
            try:
                self.bitget_api.exchange.cancel_all_orders('ETHUSDT')
                logger.info("‚úÖ Ordens canceladas")
            except:
                pass
            
            # M√©todo 2: Fechar via posi√ß√µes da exchange
            try:
                positions = self.bitget_api.fetch_positions(['ETHUSDT'])
                for pos in positions:
                    if abs(pos['size']) > 0:
                        side = 'sell' if pos['side'] == 'long' else 'buy'
                        self.bitget_api.exchange.create_market_order(
                            'ETHUSDT', side, abs(pos['size'])
                        )
                        logger.info(f"‚úÖ Emerg√™ncia: {side} executado")
                        return True
            except Exception as e:
                logger.error(f"‚ùå M√©todo emerg√™ncia 2: {e}")
            
            # M√©todo 3: Fechar posi√ß√£o por reduce-only
            try:
                if self.current_position:
                    side = 'sell' if self.current_position.side == TradeDirection.LONG else 'buy'
                    self.bitget_api.exchange.create_order(
                        'ETHUSDT', 'market', side, abs(self.current_position.size), 
                        None, {'reduceOnly': True}
                    )
                    logger.info("‚úÖ Emerg√™ncia: reduce-only executado")
                    return True
            except Exception as e:
                logger.error(f"‚ùå M√©todo emerg√™ncia 3: {e}")
            
            # M√©todo 4: For√ßa limpeza (√∫ltimo recurso)
            logger.warning("‚ö†Ô∏è LIMPEZA FOR√áADA - posi√ß√£o ser√° removida")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro na emerg√™ncia total: {e}")
            return True  # Sempre "sucesso" para limpeza for√ßada

    def get_account_balance(self) -> float:
        """Obter saldo da conta com fallback"""
        try:
            balance_info = self.bitget_api.get_balance()
            if balance_info and isinstance(balance_info, dict):
                balance = float(balance_info.get('free', 0.0))
                if balance > 0:
                    return balance
                    
            if self.paper_trading:
                return 1000.0
            else:
                logger.warning("‚ö†Ô∏è Saldo n√£o obtido - usando fallback")
                return 100.0
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter saldo: {e}")
            return 1000.0 if self.paper_trading else 100.0

    def emergency_stop(self) -> bool:
        """Parada de emerg√™ncia com fechamento for√ßado"""
        try:
            logger.warning("üö® PARADA DE EMERG√äNCIA TOTAL")
            
            self.state = TradingState.EMERGENCY
            
            # Fechar posi√ß√£o com TODOS os m√©todos
            if self.current_position:
                self._emergency_close_all_methods("Emergency stop total")
            
            # Cancelar todas as ordens
            try:
                self.bitget_api.exchange.cancel_all_orders(self.symbol)
            except:
                pass
            
            # Parar thread
            if self.trading_thread:
                self.trading_thread.join(timeout=3)
            
            self.state = TradingState.STOPPED
            
            logger.warning("üõë Parada de emerg√™ncia total conclu√≠da")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro na parada de emerg√™ncia: {e}")
            return False

    def reset_daily_stats(self):
        """Reset para novo dia - otimizado para 50%"""
        try:
            logger.info("üîÑ Reset para NOVO DIA - META 50%!")
            
            with self._lock:
                self.trades_today = 0
                self.metrics = TradingMetrics()
                self.analysis_count = 0
                self.trades_rejected = 0
                self.forced_trades = 0
                self.micro_profits = 0
                self.quick_exits = 0
                self.last_rejection_reason = ""
                self.last_trade_time = time.time()
                self.max_profit_reached = 0.0
                self.max_loss_reached = 0.0
                self.current_profit_lock = 0
                
                # Reset para modo ultra agressivo
                self.aggressive_mode_active = True
                self.force_trade_mode = False
            
            logger.info("‚úÖ NOVO DIA - PRONTO PARA 50% DE LUCRO!")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao resetar: {e}")

    def get_daily_stats(self) -> Dict:
        """Estat√≠sticas focadas na meta de 50% di√°rio"""
        try:
            with self._lock:
                current_time = datetime.now()
                hours_trading = max(1, (current_time.hour - 8) if current_time.hour >= 8 else 24)
                
                daily_profit_pct = self.metrics.total_profit * 100
                target_achievement = (daily_profit_pct / 50.0) * 100
                
                return {
                    'target_50_percent': {
                        'target_profit': '50.00%',
                        'current_profit': f"{daily_profit_pct:.4f}%",
                        'achievement': f"{target_achievement:.1f}%",
                        'remaining_needed': f"{max(0, 50.0 - daily_profit_pct):.4f}%",
                        'on_track': target_achievement >= (hours_trading / 24) * 100
                    },
                    'ultra_aggressive_stats': {
                        'trades_executed': self.trades_today,
                        'target_trades': self.target_trades_per_day,
                        'forced_trades': self.forced_trades,
                        'micro_profits': self.micro_profits,
                        'quick_exits': self.quick_exits,
                        'trades_per_hour': round(self.trades_today / hours_trading, 1),
                        'analysis_count': self.analysis_count,
                        'rejection_rate': round((self.trades_rejected / max(1, self.analysis_count)) * 100, 1)
                    },
                    'performance_detailed': {
                        'total_trades': self.metrics.total_trades,
                        'win_rate': round(self.metrics.win_rate, 2),
                        'average_duration': round(self.metrics.average_trade_duration, 1),
                        'consecutive_wins': self.metrics.consecutive_wins,
                        'max_consecutive_wins': self.metrics.max_consecutive_wins,
                        'profitable_trades': self.metrics.profitable_trades,
                        'losing_trades': self.metrics.losing_trades
                    },
                    'current_settings_aggressive': {
                        'min_confidence': f"{self.min_confidence_to_trade*100:.1f}%",
                        'min_strength': f"{self.min_strength_threshold*100:.3f}%",
                        'profit_target': f"{self.profit_target*100:.2f}%",
                        'stop_loss': f"{abs(self.stop_loss_target)*100:.2f}%",
                        'max_position_time': f"{self.max_position_time}s",
                        'force_trade_after': f"{self.force_trade_after_seconds}s"
                    }
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro nas estat√≠sticas: {e}")
            return {'error': str(e)}

    def adjust_for_50_percent_target(self):
        """Ajustar par√¢metros dinamicamente para atingir 50% di√°rio"""
        try:
            with self._lock:
                current_profit_pct = self.metrics.total_profit * 100
                current_time = datetime.now()
                hours_passed = max(1, current_time.hour - 8) if current_time.hour >= 8 else 1
                
                expected_profit = (50.0 / 24) * hours_passed  # Profit esperado at√© agora
                profit_deficit = max(0, expected_profit - current_profit_pct)
                
                logger.info(f"üìä AJUSTE DIN√ÇMICO PARA 50%:")
                logger.info(f"   üí∞ Profit atual: {current_profit_pct:.4f}%")
                logger.info(f"   üéØ Esperado: {expected_profit:.2f}%")
                logger.info(f"   üìâ D√©ficit: {profit_deficit:.2f}%")
                
                # Se muito atr√°s da meta, ficar ainda mais agressivo
                if profit_deficit > 5.0:  # Mais de 5% atr√°s
                    logger.warning("üö® MUITO ATR√ÅS DA META - ULTRA AGRESSIVO!")
                    self.min_confidence_to_trade = max(0.2, self.min_confidence_to_trade - 0.1)
                    self.min_strength_threshold = max(0.0005, self.min_strength_threshold - 0.001)
                    self.force_trade_after_seconds = max(30, self.force_trade_after_seconds - 15)
                    self.profit_target = max(0.005, self.profit_target - 0.001)
                
                # Se na meta ou √† frente, manter agressividade mas com mais qualidade
                elif profit_deficit < -2.0:  # Mais de 2% √† frente
                    logger.info("‚úÖ √Ä FRENTE DA META - QUALIDADE!")
                    self.min_confidence_to_trade = min(0.5, self.min_confidence_to_trade + 0.05)
                    self.min_strength_threshold = min(0.002, self.min_strength_threshold + 0.0005)
                
                logger.info(f"   üéØ Nova confian√ßa: {self.min_confidence_to_trade*100:.1f}%")
                logger.info(f"   üí™ Nova for√ßa: {self.min_strength_threshold*100:.3f}%")
                
        except Exception as e:
            logger.error(f"‚ùå Erro no ajuste din√¢mico: {e}")

    # M√©todos de compatibilidade
    def _close_position_immediately(self, reason: str):
        """Compatibilidade - usar m√©todo completo"""
        self._close_position_with_all_methods(reason)
